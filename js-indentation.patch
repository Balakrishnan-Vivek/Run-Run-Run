diff --git a/js/db_mgnt.js b/js/db_mgnt.js
index af93113..f8dc024 100755
--- a/js/db_mgnt.js
+++ b/js/db_mgnt.js
@@ -1,29 +1,29 @@
-//'use strict';
+// 'use strict';
 
 var runrunrun = {};
 var sports = {};
-var current_profil=1; //A enlever
-runrunrun.indexedDB={};
+var current_profil = 1; //A enlever
+runrunrun.indexedDB = {};
 var DBNAME = 'RunRunRun';
 var DBVERSION = 1;
 var STORENAME_CONF = 'conf';
 var STORENAME_SPORTS = 'sports';
-var STORENAME_TAGS= 'tags';
-var STORENAME_PARCOURS='parcours';
-var STORENAME_RECORDS='records';
-var STORENAME_PROFILS='profils';
-var current_parcours=null;
-var startTime=null; 
+var STORENAME_TAGS = 'tags';
+var STORENAME_PARCOURS = 'parcours';
+var STORENAME_RECORDS = 'records';
+var STORENAME_PROFILS = 'profils';
+var current_parcours = null;
+var startTime = null;
 var db;
 var IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;
 var IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;
-var store_conf=null;
-var store_sports=null;
-var store_parcours=null;
-var store_records=null;
-var store_tags=null;
-var store_profils=null;
-var store_mapservice=null;
+var store_conf = null;
+var store_sports = null;
+var store_parcours = null;
+var store_records = null;
+var store_tags = null;
+var store_profils = null;
+var store_mapservice = null;
 var object_store_conf;
 var object_store_profils;
 var object_store_tags;
@@ -31,1208 +31,975 @@ var object_store_mapservice;
 var object_store_sports;
 var object_store_parcours;
 var object_store_records;
-var init_add_sport=false;
-var type='readwrite';
+var init_add_sport = false;
+var type = 'readwrite';
 var openreq;
 var indexedDB = window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 
 
-//Fonction called by window.onload. It opened the DB and creates stores  
-runrunrun.indexedDB.open=function(){
-
-  var request= indexedDB.open(DBNAME, DBVERSION);
+// Function called by window.onload. It opened the DB and creates stores
+runrunrun.indexedDB.open = function() {
+  var request = indexedDB.open(DBNAME, DBVERSION);
   request.onupgradeneeded = function(e) {
-    db =  e.target.result;
-    object_store_sports= db.createObjectStore(STORENAME_SPORTS,{ keyPath:undefined , autoIncrement: true });
-    object_store_parcours=db.createObjectStore(STORENAME_PARCOURS,{ keyPath: undefined, autoIncrement: true});
-    object_store_records=db.createObjectStore(STORENAME_RECORDS,{keyPath: undefined, autoIncrement: true});
-    object_store_tags=db.createObjectStore(STORENAME_TAGS,{keyPath: undefined, autoIncrement: true});
-    object_store_profils=db.createObjectStore(STORENAME_PROFILS,{keyPath: undefined, autoIncrement: true});
-    
-            
-    init_add_sport=true; //Variable sets to true for insertion of sports in IDB,
-    object_store_records.createIndex('parcours_id','parcours_id',{unique: false });
-    object_store_sports.createIndex('name','name',{ unique: true });
-           
-
+    db = e.target.result;
+    object_store_sports = db.createObjectStore(STORENAME_SPORTS, { keyPath: undefined, autoIncrement: true });
+    object_store_parcours = db.createObjectStore(STORENAME_PARCOURS, { keyPath: undefined, autoIncrement: true});
+    object_store_records = db.createObjectStore(STORENAME_RECORDS, {keyPath: undefined, autoIncrement: true});
+    object_store_tags = db.createObjectStore(STORENAME_TAGS, {keyPath: undefined, autoIncrement: true});
+    object_store_profils = db.createObjectStore(STORENAME_PROFILS, {keyPath: undefined, autoIncrement: true});
+
+    init_add_sport = true; //Variable sets to true for insertion of sports in IDB,
+    object_store_records.createIndex('parcours_id', 'parcours_id', {unique: false });
+    object_store_sports.createIndex('name', 'name', { unique: true });
   };
-  request.onsuccess = function (e) {
-    db =  request.result;
+  request.onsuccess = function(e) {
+    db = request.result;
 
     //Insertion of sports in IDB,if the stores are new
-    if(init_add_sport){add_sports();}; 
-    
+    if (init_add_sport) {add_sports();}
+
     //Display tags, sports, profiles and update of the list of courses
     get_all_tags();
     get_all_sports();
     show_list_profil();
     update_parcours_list();
-   
-
   }
 };
 
-function show_list_profil(){
-   
-  //Foncton displays list of profiles in the HTML Select list
+function show_list_profil() {
+  // Function displays list of profiles in the HTML Select list
 
-  var select_tags=document.getElementById('profil_edit_list');
-  store_profils=db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
+  var select_tags = document.getElementById('profil_edit_list');
+  store_profils = db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
   var keyRange = IDBKeyRange.lowerBound(0);
   var cursorRequest = store_profils.openCursor(keyRange);
-    
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    
-    if(result){
+
+    if (result) {
       var elOptNew = document.createElement('option');
       elOptNew.text = result.value.name;
-      elOptNew.value =result.key;
-      select_tags.add(elOptNew, null);         
+      elOptNew.value = result.key;
+      select_tags.add(elOptNew, null);
       result.continue();
     }
   }
-  cursorRequest.onerror=function(e){}
+  cursorRequest.onerror = function(e) {}
 }
 
-var add_parcours_to_list=function(key,item, item2, tag){
-  
-//Fonction called for each in insertion of course in the HTML Table
+var add_parcours_to_list = function(key,item, item2, tag) {
+  // Function called for each in insertion of course in the HTML Table
+
+  var table = document.getElementById('table_parcours');
+  var tr = document.createElement('tr');
+  var td1 = document.createElement('td');
+  var td2 = document.createElement('td');
+  var td3 = document.createElement('td');
 
-  var table=document.getElementById('table_parcours');
-  var tr = document.createElement("tr");
-  var td1=document.createElement("td");
-  var td2=document.createElement("td");
-  var td3=document.createElement("td");
-  
   td1.appendChild(document.createTextNode(item.name));
-  td2.appendChild(document.createTextNode(item2.name)); 
+  td2.appendChild(document.createTextNode(item2.name));
   td3.appendChild(document.createTextNode(tag));
   tr.appendChild(td1);
   tr.appendChild(td2);
   tr.appendChild(td3);
   table.appendChild(tr);
-  
-  //Add a listener, when someone clicks it opens the detail page of this course
 
-  tr.addEventListener("click",function(){detail_parcours(key);}, false); 
-    
-}
+  //Add a listener, when someone clicks it opens the detail page of this course
 
+  tr.addEventListener('click', function() {detail_parcours(key);}, false);
+};
 
-function detail_parcours(id){
- 
-//Function called for the detail page of a course. Arg is the ID of the course
+function detail_parcours(id) {
+  // Function called for the detail page of a course. Arg is the ID of the course
 
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
   var keyRange = IDBKeyRange.only(parseInt(id));
   log(keyRange);
   var cursorRequest = store_parcours.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-  if(!!result == false){ }else{
-    //Datas are sent to an other function, It will fill the DOM.
-    fill_parcours_detail(result.value, "parcours", result.key);
-  }
+    if (!!result == false) { }else {
+      //Datas are sent to an other function, It will fill the DOM.
+      fill_parcours_detail(result.value, 'parcours', result.key);
+    }
   }
-  cursorRequest.onerror=function(e){}
+  cursorRequest.onerror = function(e) {}
 }
 
-
-
-function update_parcours_list(){
- 
-  var KR= IDBKeyRange;
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+function update_parcours_list() {
+  var KR = IDBKeyRange;
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
 
   var keyRange = IDBKeyRange.lowerBound(0);
   var cursorRequest = store_parcours.openCursor(keyRange);
-    
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    var tag_val='';
-    
-    if(result){
+    var tag_val = '';
+
+    if (result) {
       //So it's hard to understand... get_tag will get the tag of the course and send datas to another function, at the end the last function will fill the data of the course in DOM
-      get_tag_info(result.key,result.value);
+      get_tag_info(result.key, result.value);
       result.continue();
     }
   }
-  cursorRequest.onerror=function(e){
-    
+  cursorRequest.onerror = function(e) {
+
   }
-    
 }
 
-function fill_edit_profil_form(profil, index){
-  
+function fill_edit_profil_form(profil, index) {
   //Fill the form for profile edition
-  document.getElementById("profil_name_edit").value=profil.value.name;
-  document.getElementById("profil_weight_edit").value=profil.value.weight;
-  document.getElementById("profil_id_edit").value=profil.key;
-  document.getElementById("profil_index_edit").value=index;
-  if(profil.value.sex=="M"){
+  document.getElementById('profil_name_edit').value = profil.value.name;
+  document.getElementById('profil_weight_edit').value = profil.value.weight;
+  document.getElementById('profil_id_edit').value = profil.key;
+  document.getElementById('profil_index_edit').value = index;
+  if (profil.value.sex == 'M') {
     document.getElementById('profil_sex_edit').selectedIndex = 0;
-  }else{
+  } else {
     document.getElementById('profil_sex_edit').selectedIndex = 1;
   }
- }
-
-function fill_edit_tag_form(tag,index){
-   
-  //Fill the form for tag edition
-  console.log("Index "+index);
-  document.getElementById("tag_name_edit").value=tag.value.name;
-  document.getElementById("tag_id_edit").value=tag.key; 
-  document.getElementById("tag_index_edit").value=index; 
 }
 
+function fill_edit_tag_form(tag,index) {
+  // Fill the form for tag edition
+  console.log('Index '+ index);
+  document.getElementById('tag_name_edit').value = tag.value.name;
+  document.getElementById('tag_id_edit').value = tag.key;
+  document.getElementById('tag_index_edit').value = index;
+}
 
-
-function del_tag(){
-  
-  //Deletion of a tag
-  var element=document.getElementById("tag_edit_list");
-  var id=element.value;
-  var index=element.selectedIndex;
-  delete_tag(id, delete_option_from_list("tag_edit_list",index));
+function del_tag() {
+  // Deletion of a tag
+  var element = document.getElementById('tag_edit_list');
+  var id = element.value;
+  var index = element.selectedIndex;
+  delete_tag(id, delete_option_from_list('tag_edit_list', index));
 }
 
-function del_profil(){
-  
-  //Deletion of a profile
-  var element=document.getElementById("profil_edit_list");
-  var id=element.value;
-  var index=element.selectedIndex;
-  delete_profil(id, delete_option_from_list("profil_edit_list",index));
+function del_profil() {
+  // Deletion of a profile
+  var element = document.getElementById('profil_edit_list');
+  var id = element.value;
+  var index = element.selectedIndex;
+  delete_profil(id, delete_option_from_list('profil_edit_list', index));
 }
 
-function load_tag(){
-  
-  //Load a tag in the field "input text" of the edit form
-  var id=parseInt(document.getElementById("tag_edit_list").value);
-  var index=document.getElementById("tag_edit_list").selectedIndex;
+function load_tag() {
+  // Load a tag in the field "input text" of the edit form
+  var id = parseInt(document.getElementById('tag_edit_list').value);
+  var index = document.getElementById('tag_edit_list').selectedIndex;
 
- 
-  console.log("Index "+index);
-  store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+  console.log('Index '+ index);
+  store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
   var keyRange = IDBKeyRange.only(id);
   var cursorRequest = store_tags.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    if(!!result == false){
-     callback(result.value);  
-    }else{
-      //Fill the input and flyto the page
-      fill_edit_tag_form(result,index);
-      flyto("tag_edit");
-      
-      if(typeof(callback)!="undefined"){}    
+    if (!!result == false) {
+     callback(result.value);
+    } else {
+      // Fill the input and flyto the page
+      fill_edit_tag_form(result, index);
+      flyto('tag_edit');
+
+      if (typeof(callback) != 'undefined') {}
     }
   }
-  cursorRequest.onerror=function(e){
-  
-  }
-  
+  cursorRequest.onerror = function(e) {};
 }
 
+function load_profil() {
+  // Load profile in the form for edition
 
-function load_profil(){
-  
-  //Load profile in the form for edition 
-  
-  var id=parseInt(document.getElementById("profil_edit_list").value);
-  var index=document.getElementById("profil_edit_list").selectedIndex;
-  store_profils=db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
+  var id = parseInt(document.getElementById('profil_edit_list').value);
+  var index = document.getElementById('profil_edit_list').selectedIndex;
+  store_profils = db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
   var keyRange = IDBKeyRange.only(id);
   var cursorRequest = store_profils.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-  if(!!result == false){
+  if (!!result == false) {
     callback(result.value);
-    }else{
+    }else {
     fill_edit_profil_form(result, index);
-    flyto("profil_edit");
-  }   
+    flyto('profil_edit');
+  }
   }
-  cursorRequest.onerror=function(e){
+  cursorRequest.onerror = function(e) {
    }
-  
 }
 
-function edit_tag(){
-  
-  
-  var tag={};
-  tag.id=parseInt(document.getElementById("tag_id_edit").value);
-  tag.name=document.getElementById("tag_name_edit").value;
-  var index=document.getElementById("tag_index_edit").value;
-  edition_tag(tag,index);
-    
+function edit_tag() {
+  var tag = {};
+  tag.id = parseInt(document.getElementById('tag_id_edit').value);
+  tag.name = document.getElementById('tag_name_edit').value;
+  var index = document.getElementById('tag_index_edit').value;
+  edition_tag(tag, index);
 }
 
-
-
-function edition_tag(tag,index){
-   
-  //Edition of a tag
+function edition_tag(tag,index) {
+  // Edition of a tag
   var keyRange = IDBKeyRange.only(parseInt(tag.id));
-  store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+  store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
   var cursorRequest = store_tags.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(evt){
+
+  cursorRequest.onsuccess = function(evt) {
     var cursor = evt.target.result;
     console.log(tag);
     var objRequest = cursor.update(tag);
 
-    objRequest.onsuccess = function(ev){
-      update_item(tag.id,tag.name,'tag_edit_list', index);
-      update_item(tag.id,tag.name,'choice-tags', index);
-      flyto("tag_list");    };
+    objRequest.onsuccess = function(ev) {
+      update_item(tag.id, tag.name, 'tag_edit_list', index);
+      update_item(tag.id, tag.name, 'choice-tags', index);
+      flyto('tag_list'); };
 
-    objRequest.onerror = function(ev){
-      flyto("tag_list");
+    objRequest.onerror = function(ev) {
+      flyto('tag_list');
     };
   };
-  cursorRequest.onerror = function(evt){
+  cursorRequest.onerror = function(evt) {
     log('Error in retrieving record 88');
-  };  
+  };
 }
 
 
-function edit_profil(){
-  
-  //After submitting the  profile edit form. we put data in object and send it to an other function
-  var profil={};
-  profil.id=parseInt(document.getElementById("profil_id_edit").value);
-  profil.name=document.getElementById("profil_name_edit").value;
-  profil.weight=document.getElementById("profil_weight_edit").value;
-  profil.sex=document.getElementById("profil_sex_edit").value;
-  var index=document.getElementById("profil_index_edit").value;
-  profil.active='false';
-  edition_profil(profil,index); 
+function edit_profil() {
+  // After submitting the  profile edit form. we put data in object and send it
+  // to an other function
+  var profil = {};
+  profil.id = parseInt(document.getElementById('profil_id_edit').value);
+  profil.name = document.getElementById('profil_name_edit').value;
+  profil.weight = document.getElementById('profil_weight_edit').value;
+  profil.sex = document.getElementById('profil_sex_edit').value;
+  var index = document.getElementById('profil_index_edit').value;
+  profil.active = 'false';
+  edition_profil(profil, index);
 }
 
-function edition_profil(profil,index){
-  
-  //The argument is an object profile.This function will update the record in IDB
+function edition_profil(profil,index) {
+  // The argument is an object profile.This function will update the record in IDB
   var keyRange = IDBKeyRange.only(parseInt(profil.id));
-  store_profils=db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
+  store_profils = db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
   var cursorRequest = store_profils.openCursor(keyRange);
 
-  cursorRequest.onsuccess = function(evt){
+  cursorRequest.onsuccess = function(evt) {
     var cursor = evt.target.result;
     //do the update
     var objRequest = cursor.update(profil);
-    objRequest.onsuccess = function(ev){
-      update_item(profil.id,profil.name,"profil_edit_list", index);
-      update_item(profil.id,profil.name,"profil_edit_list", index);
-      flyto("profil_list");    };
-    objRequest.onerror = function(ev){  flyto("profil_list");  };
+    objRequest.onsuccess = function(ev) {
+      update_item(profil.id, profil.name, 'profil_edit_list', index);
+      update_item(profil.id, profil.name, 'profil_edit_list', index);
+      flyto('profil_list'); };
+    objRequest.onerror = function(ev) { flyto('profil_list'); };
   };
-  
-  cursorRequest.onerror = function(evt){ };
-}
-
 
+  cursorRequest.onerror = function(evt) {};
+}
 
-function insert_profil(){
-  
-  //Retrieve data of the add profile , puts it in the object profil and send it to add_profil
-  var profil={};
-  profil.name=document.getElementById("profil_name_add").value;
-  profil.sex=document.getElementById("profil_sex_add").value;
-  profil.weight=document.getElementById("profil_weight_add").value;
-  profil.active='false';
+function insert_profil() {
+  // Retrieve data of the add profile , puts it in the object profil and send it
+  // to add_profil
+  var profil = {};
+  profil.name = document.getElementById('profil_name_add').value;
+  profil.sex = document.getElementById('profil_sex_add').value;
+  profil.weight = document.getElementById('profil_weight_add').value;
+  profil.active = 'false';
 
   add_profil(profil);
-
 }
 
-
-function insert_tag(){
-   
-  //Retrieve the tag name of the tag from the add form , put it in object and send the name to add_tag()
-  var tag={};
-  tag.name=document.getElementById("tag_name_add").value;
-  
-
+function insert_tag() {
+  // Retrieve the tag name of the tag from the add form , put it in object and
+  // send the name to add_tag()
+  var tag = {};
+  tag.name = document.getElementById('tag_name_add').value;
   add_tag(tag.name);
-
 }
 
-
-
-function add_profil(profil){
-  
-  //Receive an object "profile" and insert it in IDB
-  var transaction = db.transaction("profils", "readwrite");
+function add_profil(profil) {
+  // Receive an object "profile" and insert it in IDB
+  var transaction = db.transaction('profils', 'readwrite');
   var objectStore = transaction.objectStore(STORENAME_PROFILS);
-  var req=objectStore.add(profil);
- 
+  var req = objectStore.add(profil);
+
   req.onsuccess = function(e) {
-    var obj={};
-    obj.key=e.target.result;
-    obj.name=profil.name;
-    add_option_to_list("profil_edit_list",obj,flyto("profil_list"));
-     
-    };
-    req.onerror = function() {
-         
-    };
+    var obj = {};
+    obj.key = e.target.result;
+    obj.name = profil.name;
+    add_option_to_list('profil_edit_list', obj, flyto('profil_list'));
+  };
+  req.onerror = function() {};
 }
 
-
-
-function add_sport(sport){
-   
-  //Receive an object "sport" and insert it in IDB
-  var transaction = db.transaction('sports', "readwrite");
+function add_sport(sport) {
+  // Receive an object "sport" and insert it in IDB
+  var transaction = db.transaction('sports', 'readwrite');
   transaction.oncomplete = function(event) {};
   var objectStore = transaction.objectStore('sports');
-  var req=objectStore.add(sport);
-
-  req.onsuccess = function() {
-   
-  };
-  req.onerror = function() {
-   
-  };  
+  var req = objectStore.add(sport);
+  req.onsuccess = function() {};
+  req.onerror = function() {};
 }
 
+function add_sports() {
+  // Function called during the first load , it adds sports in IDB
+  var sports = {};
+  var sport = {};
 
-  
-
-
-
-function add_sports(){
-   
-  //Function called during the first load , it adds sports in IDB
-  var sports={};
-  var sport={};
-  
-  sport.name='marche';
-  sport.h_cal=2;
-  sport.f_cal=2;
+  sport.name = 'marche';
+  sport.h_cal = 2;
+  sport.f_cal = 2;
   add_sport(sport);
-  
-  sport.name='jogging';
-  sport.h_cal=13;
-  sport.f_cal=12;
+
+  sport.name = 'jogging';
+  sport.h_cal = 13;
+  sport.f_cal = 12;
   add_sport(sport);
-  
-  sport.name='velo';
-  sport.h_cal=4;
-  sport.f_cal=4;
+
+  sport.name = 'velo';
+  sport.h_cal = 4;
+  sport.f_cal = 4;
   add_sport(sport);
-    
 }
 
-
-
-
-
-function reset_list(){
-   
-  //Function deleting of the entries in the HTML list of tags 
-  var formObj =document.getElementById('tag_edit_list');
-  for (var loop=0; loop < formObj.mySelect.options.length; loop++) {
+function reset_list() {
+  // Function deleting of the entries in the HTML list of tags
+  var formObj = document.getElementById('tag_edit_list');
+  for (var loop = 0; loop < formObj.mySelect.options.length; loop++) {
     formObj.mySelect.options[loop] = null; // remove the option
-  } 
-  var formObj =document.getElementById('choice-tags');
-  for (var loop=0; loop < formObj.mySelect.options.length; loop++) {
+  }
+  var formObj = document.getElementById('choice-tags');
+  for (var loop = 0; loop < formObj.mySelect.options.length; loop++) {
     formObj.mySelect.options[loop] = null; // remove the option
-  } 
+  }
 }
 
-function add_tag(name){
-  
-  //Receive a name of tag and insert it in IDB. Then it updates the two lists (edition list and choice of tag)
-  var store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
-  var req=store_tags.add({name:name});
+function add_tag(name) {
+  // Receive a name of tag and insert it in IDB. Then it updates the two lists
+  // (edition list and choice of tag)
+  var store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+  var req = store_tags.add({name: name});
 
   req.onsuccess = function(e) {
-  var obj={};
-  obj.key=e.target.result;
-  obj.name=name;
-    add_option_to_list("tag_edit_list",obj,flyto("tag_list"));
-    add_option_to_list("choice-tags",obj);
-  };
-  req.onerror = function() {
-         
+  var obj = {};
+  obj.key = e.target.result;
+  obj.name = name;
+    add_option_to_list('tag_edit_list', obj, flyto('tag_list'));
+    add_option_to_list('choice-tags', obj);
   };
-
-  
-
-
+  req.onerror = function() {};
 }
 
+function add_record(obj) {
+  // Insert an object of type record in IDB
+  store_records = db.transaction(STORENAME_RECORDS, type).objectStore(STORENAME_RECORDS);
+  var req = store_records.add(obj);
 
-function add_record(obj){
-  
-  //Insert an object of type record in IDB
-  store_records=db.transaction(STORENAME_RECORDS, type).objectStore(STORENAME_RECORDS);
-  var req=store_records.add(obj);
-  
-  req.onsuccess = function() {
-    
-  };
-  req.onerror = function() {
-   
-  };
-
+  req.onsuccess = function() {};
+  req.onerror = function() {};
 }
 
-
-function render_sports(data, id){
-  
-  //Add a sport item in the list of choice
-  var select_sports=document.getElementById('choice-sports');
+function render_sports(data, id) {
+  // Add a sport item in the list of choice
+  var select_sports = document.getElementById('choice-sports');
   var elOptNew = document.createElement('option');
   elOptNew.text = data.name;
   elOptNew.value = id;
-  select_sports.add(elOptNew, null);   
+  select_sports.add(elOptNew, null);
 }
 
-
-
-function render_tags(data, id){
-  
-  //Add a tag in the two list : edition and choice
-  var select_tags=document.getElementById('tag_edit_list');
+function render_tags(data, id) {
+  // Add a tag in the two list : edition and choice
+  var select_tags = document.getElementById('tag_edit_list');
   var elOptNew = document.createElement('option');
   elOptNew.text = data.name;
   elOptNew.value = id;
-  select_tags.add(elOptNew, null); 
-   
-  var select_tags=document.getElementById('choice-tags');
+  select_tags.add(elOptNew, null);
+
+  var select_tags = document.getElementById('choice-tags');
   var elOptNew = document.createElement('option');
   elOptNew.text = data.name;
   elOptNew.value = id;
-  select_tags.add(elOptNew, null); 
-   
+  select_tags.add(elOptNew, null);
 }
 
-
-
-function remove_tag_from_list(id){
-  
-  //Remove a tag from a list
-  var select_tags=document.getElementById('list_tags');
+function remove_tag_from_list(id) {
+  // Remove a tag from a list
+  var select_tags = document.getElementById('list_tags');
   select_tags.remove(id);
 }
 
-
-
-function get_all_tags(){
-   
-  //Retrieve all the tags from the IDB and send it to render_tags for displaying it the list
-  var transaction = db.transaction('tags', "readwrite");
+function get_all_tags() {
+  // Retrieve all the tags from the IDB and send it to render_tags for
+  // displaying it the list
+  var transaction = db.transaction('tags', 'readwrite');
   var objectStore = transaction.objectStore('tags');
   var keyRange = IDBKeyRange.lowerBound(0);
   var cursorRequest = objectStore.openCursor(keyRange);
-    
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    
-    if(result){
+    if (result) {
       render_tags(result.value, result.key);
-    result.continue();
+      result.continue();
     }
-  }
-  cursorRequest.onerror=function(e){
-   
-  } 
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-function get_all_sports(){
- 
-  //Retrieve all the sports from IDB and send it to render sport for displaying it in the app
-  var transaction = db.transaction("sports", "readwrite");
-  var objectStore = transaction.objectStore("sports");
+function get_all_sports() {
+  // Retrieve all the sports from IDB and send it to render sport for displaying
+  // it in the app
+  var transaction = db.transaction('sports', 'readwrite');
+  var objectStore = transaction.objectStore('sports');
   var keyRange = IDBKeyRange.lowerBound(0);
   var cursorRequest = objectStore.openCursor(keyRange);
-    
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    
-    if(result){
+    if (result) {
       render_sports(result.value, result.key);
-    result.continue();
+      result.continue();
     }
-  }
-  
-  cursorRequest.onerror=function(e){
- 
-  } 
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-
-function see_records(parcours){
- 
-  var new_dist=0;
-  var cpt_curs=0;
-  var last_lat=null;
-  var last_long=null;
-  store_records=db.transaction(STORENAME_RECORDS, type).objectStore(STORENAME_RECORDS);
-  var index = store_records.index("parcours_id");
+function see_records(parcours) {
+  var new_dist = 0;
+  var cpt_curs = 0;
+  var last_lat = null;
+  var last_long = null;
+  store_records = db.transaction(STORENAME_RECORDS, type).objectStore(STORENAME_RECORDS);
+  var index = store_records.index('parcours_id');
   var singleKeyRange = IDBKeyRange.only(parcours);
-   
+
   index.openCursor(singleKeyRange).onsuccess = function(event) {
-  var cursor = event.target.result;
+    var cursor = event.target.result;
     if (cursor) {
       render_record(cursor.value);
-      if(last_lat!=null && last_long!=null){
-        new_dist=new_dist+CalcDistanceBetween(last_lat,last_long,cursor.value.latitude,cursor.value.latitude);
+      if (last_lat != null && last_long != null) {
+        new_dist = new_dist + CalcDistanceBetween(last_lat, last_long, cursor.value.latitude, cursor.value.latitude);
       }
-      last_lat=cursor.value.latitude;
-    last_lon=cursor.value.latitude;
+      last_lat = cursor.value.latitude;
+      last_lon = cursor.value.latitude;
       cursor.continue();
       cpt_curs++;
     }
   };
 }
 
-
-
-function records_to_json(parcours){
-  
-  //Not used in the app , retrieve parcours and log a json string with datas
-  var compteur=0;
-  store_records=db.transaction(STORENAME_RECORDS, type).objectStore(STORENAME_RECORDS);
-  var index = store_records.index("parcours_id");
-  var json={};
+function records_to_json(parcours) {
+  // Not used in the app, retrieve parcours and log a json string with datas
+  var compteur = 0;
+  store_records = db.transaction(STORENAME_RECORDS, type).objectStore(STORENAME_RECORDS);
+  var index = store_records.index('parcours_id');
+  var json = {};
   var singleKeyRange = IDBKeyRange.only(parcours);
 
   index.openCursor(singleKeyRange).onsuccess = function(event) {
     var cursor = event.target.result;
     if (cursor) {
-      json[compteur]=cursor.value;
+      json[compteur] = cursor.value;
       cursor.continue();
       compteur++;
     }
-    var stringifyjson=JSON.stringify(json);
-    var newtstring=stringifyjson.replace(/\\("|'|\\)/g, "$1");
-    
+    var stringifyjson = JSON.stringify(json);
+    var newtstring = stringifyjson.replace(/\\("|'|\\)/g, '$1');
+
     console.log(stringifyjson);
   };
 }
 
-function see_ongmaps(id){
-  
-  get_parcours(id,work_on_parcours);
+function see_ongmaps(id) {
+  get_parcours(id, work_on_parcours);
 }
 
-
-function get_parcours(id, callback){
- 
-  //Use ID and retrieve a parcours from the IDB and send it to callback
-  var id=parseInt(id);
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+function get_parcours(id, callback) {
+  // Use ID and retrieve a parcours from the IDB and send it to callback
+  var id = parseInt(id);
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
   var keyRange = IDBKeyRange.only(id);
   var cursorRequest = store_parcours.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-  if(!!result == false){
-    callback(result.value);
-  }else{
-    if(typeof(callback)!="undefined"){
-         callback(result);
+    if (!!result == false) {
+      callback(result.value);
+    } else {
+      if (typeof(callback) != 'undefined') {
+        callback(result);
+      }
     }
-  }      
-  }
-  cursorRequest.onerror=function(e){
-  
   }
+  cursorRequest.onerror = function(e) {};
 }
 
-
-function get_profil_name(id){
-  
-  //Function uses ID and retrieve the profile's name from IDB
-  //It sends name to the function fill_parcours_profil
-  store_profils=db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
+function get_profil_name(id) {
+  // Function uses ID and retrieve the profile's name from IDB
+  // It sends name to the function fill_parcours_profil
+  store_profils = db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
   var keyRange = IDBKeyRange.only(parseInt(id));
   var cursorRequest = store_profils.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
-    var result = e.target.result;
-  if(!!result == false){
-    
-  }else{
-    fill_parcours_profil(result.value.name);
-  }
-
-  }
-  cursorRequest.onerror=function(e){
-  
-  }
 
+  cursorRequest.onsuccess = function(e) {
+    var result = e.target.result;
+    if (!!result == false) {
+      //
+    } else {
+      fill_parcours_profil(result.value.name);
+    }
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-var get_tag_info=function(key, objet){
-
-  store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+var get_tag_info = function(key, objet) {
+  store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
   var keyRange = IDBKeyRange.only(parseInt(objet.tag));
   var cursorRequest = store_tags.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
-    var result = e.target.result;
-  if(!!result == false){
-  
-  }else{
-    get_sport(objet.sport,objet,add_parcours_to_list, key,result.value.name)
-  }
-    
-  }
-  cursorRequest.onerror=function(e){
-  
-  }
-}
-
 
+  cursorRequest.onsuccess = function(e) {
+    var result = e.target.result;
+    if (!!result == false) {
+      //
+    } else {
+      get_sport(objet.sport, objet, add_parcours_to_list, key, result.value.name);
+    }
+  };
+  cursorRequest.onerror = function(e) {};
+};
 
-function get_tag_name(id){
-   console.log(id);
-  store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+function get_tag_name(id) {
+  console.log(id);
+  store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
   var keyRange = IDBKeyRange.only(parseInt(id));
   var cursorRequest = store_tags.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    if(!!result == false){
-                
-  }else{
-    fill_parcours_tag(result.value.name);
-  }
-  }
-  cursorRequest.onerror=function(e){
-  
-  }
+    if (!!result == false) {
+      //
+    } else {
+      fill_parcours_tag(result.value.name);
+    }
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-
-function get_tags(id, callback, callback2){
-   
-  store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+function get_tags(id, callback, callback2) {
+  store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
   var keyRange = IDBKeyRange.only(parseInt(id));
   var cursorRequest = store_tags.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    
-    if(!!result == false){
-      
-    }else{
+    if (!!result == false) {
+      //
+    } else {
       callback(result.value, callback2);
     }
-  }
-  cursorRequest.onerror=function(e){
-    
-  }
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-
-function form_edit_tag(form){
-  
-  var value=form.input_edit_sport.value;
-  var selected_index=form.list_tags.selectedIndex;
-  var id=form.list_tags[selected_index].value;
-  var data={name:value};
+function form_edit_tag(form) {
+  var value = form.input_edit_sport.value;
+  var selected_index = form.list_tags.selectedIndex;
+  var id = form.list_tags[selected_index].value;
+  var data = {name: value};
   update_tag(parseInt(id), data);
-  
 }
 
-
-function form_delete_sport(form){
-  
-  var selIndex=form.elements['list_tags'].selectedIndex;
-  var newSel=form.elements['list_tags'].options[selIndex].value;
+function form_delete_sport(form) {
+  var selIndex = form.elements['list_tags'].selectedIndex;
+  var newSel = form.elements['list_tags'].options[selIndex].value;
   delete_tag(newSel);
   remove_sport_from_list(selIndex);
-  
-  return false;
 
+  return false;
 }
 
-
-function form_get_data(action, referer){
-  
-  if(action=="add_sport" && referer.add_sport.value!=""){
+function form_get_data(action, referer) {
+  if (action == 'add_sport' && referer.add_sport.value != '') {
     add_sport(referer.add_sport.value);
-  }
-  else if(action=="delete_sport" && referer!=""){
+  } else if (action == 'delete_sport' && referer != '') {
     remove_sport_from_list(referer);
   }
 }
 
-
-var update_parcours= function(id, data){
- 
+var update_parcours = function(id, data) {
   var keyRange = IDBKeyRange.only(parseInt(id));
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
   var cursorRequest = store_parcours.openCursor(keyRange);
-  cursorRequest.onsuccess = function(evt){
+  cursorRequest.onsuccess = function(evt) {
     var cursor = evt.target.result;
     var objRequest = cursor.update(data);
-  
-    objRequest.onsuccess = function(ev){
-    };
-    objRequest.onerror = function(ev){
-     
-    };
-
+    objRequest.onsuccess = function(ev) {};
+    objRequest.onerror = function(ev) {};
   };
-  cursorRequest.onerror = function(evt){
-  };
-    
-}
-
+  cursorRequest.onerror = function(evt) {};
+};
 
-function update_tag(id, data){ 
-  
+function update_tag(id, data) {
   var keyRange = IDBKeyRange.only(id);
-  store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+  store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
   var cursorRequest = store_tags.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(evt){
+
+  cursorRequest.onsuccess = function(evt) {
     var cursor = evt.target.result;
     var objRequest = cursor.update(data);
-  
-  objRequest.onsuccess = function(ev){
-      
-    };
-    objRequest.onerror = function(ev){
-     
-    };
-  };
-  cursorRequest.onerror = function(evt){
-    
+    objRequest.onsuccess = function(ev) {};
+    objRequest.onerror = function(ev) {};
   };
+  cursorRequest.onerror = function(evt) {};
 }
 
-
-function supprimer_parcours(){
-  
-  for (var i=0; i<45; i++){
+function supprimer_parcours() {
+  for (var i = 0; i < 45; i++) {
     delete_parcours(i);
   }
 }
 
-function delete_tag(id, callback){
-  
-  var id=parseInt(id);
-  store_tag=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
-  var request=store_tag.delete(id);
+function delete_tag(id, callback) {
+  var id = parseInt(id);
+  store_tag = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+  var request = store_tag.delete(id);
 
-  request.onsuccess=function (e){
-  callback;
+  request.onsuccess = function(e) {
+    callback;
   }
-  request.onerror = function(e) {
-    
-  };
+  request.onerror = function(e) {};
 }
 
+function delete_profil(id, callback) {
+  var id = parseInt(id);
+  store_profil = db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
+  var request = store_profil.delete(id);
 
-
-
-
-function delete_profil(id, callback){
-   
-  var id=parseInt(id);
-  store_profil=db.transaction(STORENAME_PROFILS, type).objectStore(STORENAME_PROFILS);
-  var request=store_profil.delete(id);
-  
-  request.onsuccess=function (e){
-  callback;
-  }
-  
-  request.onerror = function(e) {
-   
+  request.onsuccess = function(e) {
+    callback;
   };
+  request.onerror = function(e) {};
 }
 
+function delete_parcours(id) {
+  var id = parseInt(id);
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+  var request = store_parcours.delete(id);
 
-
-function delete_parcours(id){
-  
-  var id=parseInt(id);
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
-  var request=store_parcours.delete(id);
-  
-  request.onsuccess=function (e){
-
-  }
-  request.onerror = function(e) {
-    
-  };
+  request.onsuccess = function(e) {};
+  request.onerror = function(e) {};
 }
 
+function delete_tag(id) {
+  var id = parseInt(id);
+  store_tags = db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
+  var request = store_tags.delete(id);
 
+  request.onsuccess = function(e) {};
+  request.onerror = function(e) {};
 
-function delete_tag(id){
-  
-  var id=parseInt(id);
-  store_tags=db.transaction(STORENAME_TAGS, type).objectStore(STORENAME_TAGS);
-  var request=store_tags.delete(id);
-  
-  request.onsuccess=function (e){
- 
-  }
-  
-  request.onerror = function(e) {
-   
-  };
-  
   var keyRange = IDBKeyRange.only(id);
   var cursorRequest = store_tags.openCursor(keyRange);
-
 }
 
-
-
-
-function save_data(){
-   
-  var req=store_conf.add({data1:"hello", data2:"hello2"});
-  req.onsuccess = function() {
-   
-  };
-  req.onerror = function() {
-    
-  };
+function save_data() {
+  var req = store_conf.add({data1: 'hello', data2: 'hello2'});
+  req.onsuccess = function() {};
+  req.onerror = function() {};
 }
 
-
-function delete_table_record(id_table){
-   
+function delete_table_record(id_table) {
   var table = document.getElementById(id_table);
   var rowCount = table.rows.length;
-  
-  for (var i=1; i<rowCount; i++){
+
+  for (var i = 1; i < rowCount; i++) {
     table.deleteRow(i);
   }
-  
-  
 }
 
-function render_record(data){
-   
-  var list_field_record=['latitude', 'longitude', 'timestamp', 'accuracy', 'altitudeAccuracy', 'altitude','speed','heading'];
-  var table = document.getElementById("list_records");
+function render_record(data) {
+  var list_field_record = ['latitude', 'longitude', 'timestamp', 'accuracy', 'altitudeAccuracy', 'altitude', 'speed', 'heading'];
+  var table = document.getElementById('list_records');
   var rowCount = table.rows.length;
   var row = table.insertRow(rowCount);
-  var cnt_row=0;
-            
+  var cnt_row = 0;
+
   for (var key in list_field_record) {
-    var cell=row.insertCell(cnt_row);
-    cell.innerHTML=data[list_field_record[key]];
-  cnt_row++;
+    var cell = row.insertCell(cnt_row);
+    cell.innerHTML = data[list_field_record[key]];
+    cnt_row++;
   }
-      
-  var cell=row.insertCell(cnt_row);
-  cell.innerHTML='';
+
+  var cell = row.insertCell(cnt_row);
+  cell.innerHTML = '';
 }
 
-function render_parcours(data, id){
-   
-  list_fields=["name","sport","startTime", "stopTime", "duration", "LatStartPoint", "LongStartPoint"];
-  var table = document.getElementById("list_parcours");
+function render_parcours(data, id) {
+  list_fields = ['name', 'sport', 'startTime', 'stopTime', 'duration', 'LatStartPoint', 'LongStartPoint'];
+  var table = document.getElementById('list_parcours');
   var rowCount = table.rows.length;
   var row = table.insertRow(rowCount);
-  var cnt_row=0;
-            
-  //On insere les attributs, mais ordre étrange donc je force avec tableau
+  var cnt_row = 0;
+
+  // On insere les attributs, mais ordre étrange donc je force avec tableau
   for (var key in list_fields) {
-    var cell=row.insertCell(cnt_row);
-  cell.innerHTML=data[list_fields[key]];
-  cnt_row++;
+    var cell = row.insertCell(cnt_row);
+    cell.innerHTML = data[list_fields[key]];
+    cnt_row++;
   }
-  var cell=row.insertCell(cnt_row);
-  cell.innerHTML='<input type="button" value=" Supprimer parcours" onclick="delete_parcours('+id+');" /><input type="button" value=" Voir records" onclick="see_records('+id+');" /><input type="button" value=" Voir records JSON" onclick="records_to_json('+id+');" /><input type="button" value=" Voir sur Gmaps" onclick="see_ongmaps('+id+');" />';
-           
-                    
+  var cell = row.insertCell(cnt_row);
+  cell.innerHTML = '<input type="button" value=" Supprimer parcours" onclick="delete_parcours(' + id + ');" /><input type="button" value=" Voir records" onclick="see_records(' + id + ');" /><input type="button" value=" Voir records JSON" onclick="records_to_json(' + id + ');" /><input type="button" value=" Voir sur Gmaps" onclick="see_ongmaps(' + id + ');" />';
 }
 
-function stop_parcours(){
-  
+function stop_parcours() {
   get_parcours(current_parcours, stopper_parcours);
-  
 }
 
-
-
-var stopper_parcours = function(parcours){
-  
-  var obj_date=new Date();
-  var obj=parcours;
-  obj.stopTime=obj_date.getTime();
-  obj.duration=(obj.stopTime)-(obj.startTime);
+var stopper_parcours = function(parcours) {
+  var obj_date = new Date();
+  var obj = parcours;
+  obj.stopTime = obj_date.getTime();
+  obj.duration = (obj.stopTime) - (obj.startTime);
   update_parcours(current_parcours, obj);
-  
-}
+};
 
-function list_parcours(){
-  
-  var store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+function list_parcours() {
+  var store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
   var keyRange = IDBKeyRange.lowerBound(0);
   var cursorRequest = store_parcours.openCursor(keyRange);
-  
-  cursorRequest.onsuccess = function(e){
+
+  cursorRequest.onsuccess = function(e) {
     var result = e.target.result;
-    if(result){
+    if (result) {
       render_parcours(result.value, result.key);
       result.continue();
     }
-  }
-  cursorRequest.onerror=function(e){
-  
-  }
-
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-
-var work_on_parcours=function(id){
-  
-  var transaction = db.transaction(STORENAME_RECORDS, "readwrite");
+var work_on_parcours = function(id) {
+  var transaction = db.transaction(STORENAME_RECORDS, 'readwrite');
   var objectStore = transaction.objectStore(STORENAME_RECORDS);
-  var index = objectStore.index("parcours_id");
+  var index = objectStore.index('parcours_id');
   var singleKeyRange = IDBKeyRange.only(parseInt(id));
-  var distance=null;
-  var vitesse_max=0;
-  var min_ts=null;
-  var max_ts=null;
-  var vitesse_max=0;
-  var alti_max=null;
+  var distance = null;
+  var vitesse_max = 0;
+  var min_ts = null;
+  var max_ts = null;
+  var vitesse_max = 0;
+  var alti_max = null;
   var path_polyline = new Array();
-  var old_lati=null;
-  var old_longi=null;
-  var cursorRequest=index.openCursor(singleKeyRange);
-  var array_coord=new Array();
+  var old_lati = null;
+  var old_longi = null;
+  var cursorRequest = index.openCursor(singleKeyRange);
+  var array_coord = new Array();
 
   cursorRequest.onsuccess = function(event) {
     var cursor = event.target.result;
     if (cursor) {
-      if(min_ts==null && max_ts==null){
-        min_ts=cursor.value.timestamp;
-      max_ts=cursor.value.timestamp;
+      if (min_ts == null && max_ts == null) {
+        min_ts = cursor.value.timestamp;
+        max_ts = cursor.value.timestamp;
       }
 
-      if(old_lati!=null || old_longi!=null){
-        distance=distance+CalcDistanceBetween(old_lati, old_longi,cursor.value.latitude,cursor.value.longitude);
+      if (old_lati != null || old_longi != null) {
+        distance = distance + CalcDistanceBetween(old_lati, old_longi, cursor.value.latitude, cursor.value.longitude);
       }
-      
-      var coord={};
 
-      coord.lat=cursor.value.latitude;
-      coord.lon=cursor.value.longitude;
+      var coord = {};
+
+      coord.lat = cursor.value.latitude;
+      coord.lon = cursor.value.longitude;
       array_coord.push(coord);
       //var p = new google.maps.LatLng(cursor.value.latitude, cursor.value.longitude);
       //path_polyline.push(p);
-      
-      if(cursor.value.speed>=vitesse_max){
-        vitesse_max=cursor.value.speed;
+
+      if (cursor.value.speed >= vitesse_max) {
+        vitesse_max = cursor.value.speed;
       }
-      
-      if(cursor.value.timestamp>max_ts){
-        max_ts=cursor.value.timestamp;
+
+      if (cursor.value.timestamp > max_ts) {
+        max_ts = cursor.value.timestamp;
       }
-        
-    old_lati=cursor.value.latitude;
-    old_longi=cursor.value.longitude;
-      var retour=cursor.continue();
-    }else{
-      var duree_ms=max_ts-min_ts;
+
+      old_lati = cursor.value.latitude;
+      old_longi = cursor.value.longitude;
+      var retour = cursor.continue();
+    } else {
+      var duree_ms = max_ts - min_ts;
       //polyline(path_polyline); Gmaps is disabled
       //center_map(old_lati,old_longi); Gmap is disabled
 
       //center_map(old_lati, old_longi, 16);
       draw_trace(array_coord);
-      console.log(old_lati+" "+old_longi);
-
+      console.log(old_lati + ' '+ old_longi);
     }
-
   };
-  cursorRequest.oncomplete=function(e){ };
-  cursorRequest.onerror=function(e){}
-}
-
-
+  cursorRequest.oncomplete = function(e) { };
+  cursorRequest.onerror = function(e) {}
+};
 
-function get_sport(id,item,callback, key,tag){
-   
-  //We will do a get on the parcours object, take the startTime, make minus with stopTime
-  //And we'll do an update with stopTime and duration
-  //Creation of a store on parcours object
+function get_sport(id,item,callback, key,tag) {
+  // We will do a get on the parcours object, take the startTime, make minus
+  // with stopTime and we'll do an update with stopTime and duration
+  // Creation of a store on parcours object
 
-  store_sports=db.transaction(STORENAME_SPORTS, type).objectStore(STORENAME_SPORTS);
-  //We define the keyRange with "only" for the query on DB
+  store_sports = db.transaction(STORENAME_SPORTS, type).objectStore(STORENAME_SPORTS);
+  // We define the keyRange with "only" for the query on DB
   var keyRange = IDBKeyRange.only(parseInt(id));
-  //Creation of cursor with the keyRange
+  // Creation of cursor with the keyRange
   var cursorRequest = store_sports.openCursor(keyRange);
-  //Success of the cursor
-  cursorRequest.onsuccess = function(e){
-    //Store of the result 
+  // Success of the cursor
+  cursorRequest.onsuccess = function(e) {
+    // Store of the result
     var result = e.target.result;
-
-    if(!!result == false){
-     
-    }else{
-      callback(key, item, result.value,tag);  
-    }    
-  }
-  cursorRequest.onerror=function(e){
-    
-  }
+    if (!!result == false) {
+      //
+    } else {
+      callback(key, item, result.value, tag);
+    }
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-function format_heure(date_ms){
-  
-  var duree_s=date_ms/1000;
-  var d=new Date(date_ms);
-  
-  return d.getHours()+":"+d.getMinutes()+":"+d.getSeconds()+"";
+function format_heure(date_ms) {
+  var duree_s = date_ms / 1000;
+  var d = new Date(date_ms);
+  return d.getHours() + ':'+ d.getMinutes() + ':'+ d.getSeconds() + '';
 }
 
-
-function force_insert(){
-  
-  add_parcours("Input force", input_json);
+function force_insert() {
+  add_parcours('Input force', input_json);
 }
 
-var input_json=function(pid){
-  
-  var objet2=JSON.parse(document.getElementById("input_json").value);
-  for(var x in objet2){
-    var record=objet2[x];
+var input_json = function(pid) {
+  var objet2 = JSON.parse(document.getElementById('input_json').value);
+  for (var x in objet2) {
+    var record = objet2[x];
     var new_obj = {};
-    new_obj.latitude=record.latitude;
-    new_obj.longitude=record.longitude;
-    new_obj.timestamp=record.timestamp;
-    new_obj.altitude=record.altitutde;
-    new_obj.accuracy=record.accuracy;
-    new_obj.altitudeAccuracy=record.altitutdeAccuracy;
-    new_obj.heading=record.heading;
-    new_obj.speed=record.speed;
-    new_obj.parcours_id=pid;  
+    new_obj.latitude = record.latitude;
+    new_obj.longitude = record.longitude;
+    new_obj.timestamp = record.timestamp;
+    new_obj.altitude = record.altitutde;
+    new_obj.accuracy = record.accuracy;
+    new_obj.altitudeAccuracy = record.altitutdeAccuracy;
+    new_obj.heading = record.heading;
+    new_obj.speed = record.speed;
+    new_obj.parcours_id = pid;
     add_record(new_obj);
     x++;
   }
-}
-
+};
 
-function start_parcours(){
-   
+function start_parcours() {
   chrono();
-  var sport=document.getElementById('choice-sports').value;
-  var tag=document.getElementById('choice-tags').value;
-  add_parcours(sport,tag, current_profil, start_gps);
-}
-
-
-function get_parcours_and_begin(id, obj){
-   
-  //We will do a get on the parcours object, take the startTime, make minus with stopTime
-  //And we'll do an update with stopTime and duration
-  flyto("trace");
-  //Creation of a store on parcours object
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
-  //We define the keyRange with "only" for the query on DB
+  var sport = document.getElementById('choice-sports').value;
+  var tag = document.getElementById('choice-tags').value;
+  add_parcours(sport, tag, current_profil, start_gps);
+}
+
+function get_parcours_and_begin(id, obj) {
+  // We will do a get on the parcours object, take the startTime, make minus
+  // with stopTime and we'll do an update with stopTime and duration
+  flyto('trace');
+  // Creation of a store on parcours object
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+  // We define the keyRange with "only" for the query on DB
   var keyRange = IDBKeyRange.only(parseInt(id));
-  //Creation of cursor with the keyRange
+  // Creation of cursor with the keyRange
   var cursorRequest = store_parcours.openCursor(keyRange);
-  //Success of the cursor
-  cursorRequest.onsuccess = function(e){
-    //Store of the result 
+  // Success of the cursor
+  cursorRequest.onsuccess = function(e) {
+    //Store of the result
     var result = e.target.result;
-    
-    if(!!result == false){ }
-    else{
+
+    if (!!result == false) {
+      //
+    } else {
       //Instanciation of new object
       var newobj = {};
       //We put the objet passed in parameter to "newobj"
-      newobj=result.value;
+      newobj = result.value;
       //We store Lat & Long of start Point
-      newobj.LatStartPoint= obj.LatStartPoint
-      newobj.LongStartPoint=obj.LongStartPoint;
+      newobj.LatStartPoint = obj.LatStartPoint;
+      newobj.LongStartPoint = obj.LongStartPoint;
       //Update of the object parcours
       update_parcours(id, newobj);
     }
-  }
-  cursorRequest.onerror=function(e){} 
+  };
+  cursorRequest.onerror = function(e) {};
 }
 
-function get_parcours_and_finish(id, obj){
-  
-  //We will do a get on the parcours object, take the startTime, make minus with stopTime
-  //And we'll do an update with stopTime and duration
-  //Creation of a store on parcours object
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
-  //We define the keyRange with "only" for the query on DB
+function get_parcours_and_finish(id, obj) {
+  // We will do a get on the parcours object, take the startTime, make minus
+  // with stopTime and we'll do an update with stopTime and duration
+  // Creation of a store on parcours object
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+  // We define the keyRange with "only" for the query on DB
   var keyRange = IDBKeyRange.only(parseInt(id));
-  //Creation of cursor with the keyRange
+  // Creation of cursor with the keyRange
   var cursorRequest = store_parcours.openCursor(keyRange);
-  //Success of the cursor
-  cursorRequest.onsuccess = function(e){
-    //Store of the result 
-  var result = e.target.result;
-  if(!!result == false){    log("Impossible de recuperer l'objet"); }
-  else{
-    //Calcul of the duration stopTime (type: timestamp) - startTime (type: timestamp))
-    var duration=(parseInt(obj.StopTime))-(parseInt(result.value.startTime));
-    //Instanciation of new object
-    var newobj = {};
-    //We put the objet passed in parameter to "newobj"
-    newobj=result.value;
-    //We store duration and stopTime
-    newobj.duration=duration;
-    newobj.stopTime=obj.StopTime;
-    //Update of the object parcour
-    update_parcours(id, newobj);
-  }
-  }
-  cursorRequest.onerror=function(e){ log("Erreur de curseur");}
-
+  // Success of the cursor
+  cursorRequest.onsuccess = function(e) {
+    // Store of the result
+    var result = e.target.result;
+    if (!!result == false) {
+      log("Impossible de recuperer l'objet");
+    } else {
+      //Calcul of the duration stopTime (type: timestamp) - startTime (type: timestamp))
+      var duration = (parseInt(obj.StopTime)) - (parseInt(result.value.startTime));
+      //Instanciation of new object
+      var newobj = {};
+      //We put the objet passed in parameter to "newobj"
+      newobj = result.value;
+      //We store duration and stopTime
+      newobj.duration = duration;
+      newobj.stopTime = obj.StopTime;
+      //Update of the object parcour
+      update_parcours(id, newobj);
+    }
+  };
+  cursorRequest.onerror = function(e) {
+    log('Erreur de curseur');
+  };
 }
 
-
-
-var add_parcours=function (sport,tag,profil,callback){
- 
-  store_parcours=db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
-  var obj_date=new Date();
-  var date=obj_date.getDate()+"/"+(obj_date.getMonth()+1)+"/"+obj_date.getFullYear()+"-"+obj_date.getHours()+"h"+obj_date.getMinutes()+"m"+obj_date.getSeconds()+"s";
-  var name="Parcours "+date;
+var add_parcours = function(sport,tag,profil,callback) {
+  store_parcours = db.transaction(STORENAME_PARCOURS, type).objectStore(STORENAME_PARCOURS);
+  var obj_date = new Date();
+  var date = obj_date.getDate() + '/'+ (obj_date.getMonth() + 1) + '/'+ obj_date.getFullYear() + '-'+ obj_date.getHours() + 'h'+ obj_date.getMinutes() + 'm'+ obj_date.getSeconds() + 's';
+  var name = 'Parcours '+ date;
   var obj = {};
-  obj.name=name;
-  obj.sport=sport; //id
-  obj.tag=tag;//Nom
-  obj.profil=profil; //id
-  obj.startTime=obj_date.getTime();
-  obj.duration=null;
-  obj.stopTime=null;
-  obj.LatStartPoint='';
-  obj.LongStartPoint='';
-  
-  var req=store_parcours.add(obj);
+  obj.name = name;
+  obj.sport = sport; //id
+  obj.tag = tag;//Nom
+  obj.profil = profil; //id
+  obj.startTime = obj_date.getTime();
+  obj.duration = null;
+  obj.stopTime = null;
+  obj.LatStartPoint = '';
+  obj.LongStartPoint = '';
+
+  var req = store_parcours.add(obj);
   req.onsuccess = function(e) {
-    current_parcours=req.result; //On assigne l'ID retourné à la variable current parcours.
+    current_parcours = req.result; //On assigne l'ID retourné à la variable current parcours.
     callback(current_parcours);
   };
-  req.onerror = function() { };
-  
-}
-function caller(name){
-if(arguments.callee.caller.name!=""){
+  req.onerror = function() {};
+};
 
-  console.log(arguments.callee.caller.name);
-}
-else{
-  console.log(name);
+function caller(name) {
+  if (arguments.callee.caller.name != '') {
+    console.log(arguments.callee.caller.name);
+  } else {
+    console.log(name);
+  }
 }
 
-}
diff --git a/js/dom.js b/js/dom.js
index 39d187e..9dca2b9 100644
--- a/js/dom.js
+++ b/js/dom.js
@@ -1,202 +1,146 @@
+// 'use strict';
 
-
-
-function update_display(geoloc){
-  
+function update_display(geoloc) {
   //Function called by watchPosition for each ping.
-
-  document.getElementById("speed").innerHTML=geoloc.speed;
-  document.getElementById("distance").innerHTML=geoloc.distance;
-  document.getElementById("altitude").innerHTML=geoloc.altitude;
-  document.getElementById("accuracy").innerHTML=geoloc.accuracy;
+  document.getElementById('speed').innerHTML = geoloc.speed;
+  document.getElementById('distance').innerHTML = geoloc.distance;
+  document.getElementById('altitude').innerHTML = geoloc.altitude;
+  document.getElementById('accuracy').innerHTML = geoloc.accuracy;
 }
 
-
-function warn_accuracy_not_ok(accuracy){
-  
+function warn_accuracy_not_ok(accuracy) {
   //If accuray is not good it alerts user by a warning
-  document.getElementById("distance").innerHTML="Acquisition GPS en cours...";
-  document.getElementById("accuracy").innerHTML=accuracy;
+  document.getElementById('distance').innerHTML = 'Acquisition GPS en cours...';
+  document.getElementById('accuracy').innerHTML = accuracy;
 }
 
-function add_option_to_list(id, objet, callback){
-
+function add_option_to_list(id, objet, callback) {
   //add option to a list defined by the id
-  var formObj =document.getElementById(id);
+  var formObj = document.getElementById(id);
   var elOptNew = document.createElement('option');
-    elOptNew.text = objet.name;
-    elOptNew.value =objet.key;
-   formObj.add(elOptNew, null);
-   callback;
-   
-  
+  elOptNew.text = objet.name;
+  elOptNew.value = objet.key;
+  formObj.add(elOptNew, null);
+  callback;
 }
 
+var formatter = function(value,type) {
+  //Function for the formating of datas
 
-
-var formatter=function (value,type){
-  //Function for the formating of datas 
-  
-  if(type=="date"){
-    var date=new Date(value);
-    return date.getDate()+"/"+(date.getMonth()+1)+"/"+date.getFullYear();
-    
-  }else if(type=="hour"){
-      var date=new Date(value);
-    
+  if (type == 'date') {
+    var date = new Date(value);
+    return date.getDate() + '/'+ (date.getMonth() + 1) + '/'+ date.getFullYear();
+  } else if (type == 'hour') {
+    var date = new Date(value);
     var hours = date.getHours();
     var minutes = date.getMinutes();
     var seconds = date.getSeconds();
-    return hours+":"+minutes+":"+seconds+""
-    
-  }else if(type="hms"){
-    
+    return hours + ':'+ minutes + ':'+ seconds + '';
+  } else if (type = 'hms') {
     //secondes
-var s = Math.floor(value / 1000) % 60;
-//minutes
-var m = Math.floor(value / 60000) % 60;
-//affichage
-return m+":"+s;
+    var s = Math.floor(value / 1000) % 60;
+    //minutes
+    var m = Math.floor(value / 60000) % 60;
+    //affichage
+    return m + ':'+ s;
   }
-  
-}
+};
 
-function reset_parcours_list(){
-
-  //Rei-init the list of courses
-  document.getElementById("table_parcours").innerHTML='';
+function reset_parcours_list() {
+  //Re-init the list of courses
+  document.getElementById('table_parcours').innerHTML = '';
   update_parcours_list();
-  
-  
-  
 }
 
-
-
-function fill_parcours_tag(name){
+function fill_parcours_tag(name) {
   //Fill the tag's name in the course's list
-  document.getElementById('parcours_details_tag').innerHTML=name;
-
-
+  document.getElementById('parcours_details_tag').innerHTML = name;
 }
-function fill_parcours_profil(name){
-  //Fill the profile's name in the course's lis
-  document.getElementById('parcours_details_profil').innerHTML=name;
 
+function fill_parcours_profil(name) {
+  //Fill the profile's name in the course's lis
+  document.getElementById('parcours_details_profil').innerHTML = name;
 }
 
-
-function fill_parcours_detail(item,which, id_parcours){
-
+function fill_parcours_detail(item,which, id_parcours) {
   //Fill datas of a course in the html array et formatte it.
-  var assoc=new Object();
-  assoc['parcours_name']=[{id:"parcours_details_name"}];
-  assoc['parcours_startTime']=[{id:"parcours_details_start_time", type:"hour"},{id:"parcours_details_date", type:"date"}];
-  assoc['parcours_stopTime']=[{id:"parcours_details_finish_time",  type:"hour"}];
-  assoc['parcours_profil']=[{id:"parcours_details_profil",func:"get_profil_name(id)"}];
-  assoc['parcours_tag']=[{id:"parcours_details_tag", func:"get_tag_name(id)"}];
-  assoc['parcours_duration']=[{id:"parcours_details_duration", type:"hms"}];
-  
-  work_on_parcours(id_parcours);
-  
-  
-  for(x in item){
-   if(assoc[""+which+"_"+x+""]){
-
-    for(z in assoc[""+which+"_"+x+""]){
+  var assoc = new Object();
+  assoc['parcours_name'] = [{id: 'parcours_details_name'}];
+  assoc['parcours_startTime'] = [{id: 'parcours_details_start_time', type: 'hour'},{id: 'parcours_details_date', type: 'date'}];
+  assoc['parcours_stopTime'] = [{id: 'parcours_details_finish_time', type: 'hour'}];
+  assoc['parcours_profil'] = [{id: 'parcours_details_profil', func: 'get_profil_name(id)'}];
+  assoc['parcours_tag'] = [{id: 'parcours_details_tag', func: 'get_tag_name(id)'}];
+  assoc['parcours_duration'] = [{id: 'parcours_details_duration', type: 'hms'}];
 
-      if(document.getElementById(assoc[""+which+"_"+x+""][z].id)){
-
-        var vari=item[x];
+  work_on_parcours(id_parcours);
 
-          if(assoc[""+which+"_"+x+""][z].type){
-            vari=formatter(vari,assoc[""+which+"_"+x+""][z].type);
-          }
-          else if(assoc[""+which+"_"+x+""][z].func){
-            var id=vari;
-            var fonc=eval(assoc[""+which+"_"+x+""][z].func);
-            vari=fonc;
+  for (x in item) {
+    if (assoc[''+ which + '_'+ x + '']) {
+      for (z in assoc[''+ which + '_'+ x + '']) {
+        if (document.getElementById(assoc[''+ which + '_'+ x + ''][z].id)) {
+          var vari = item[x];
+          if (assoc[''+ which + '_'+ x + ''][z].type) {
+            vari = formatter(vari, assoc[''+ which + '_'+ x + ''][z].type);
+          } else if (assoc[''+ which + '_'+ x + ''][z].func) {
+            var id = vari;
+            var fonc = eval(assoc[''+ which + '_'+ x + ''][z].func);
+            vari = fonc;
           }
-
-          document.getElementById(assoc[""+which+"_"+x+""][z].id).innerHTML=vari;
+          document.getElementById(assoc[''+ which + '_'+ x + ''][z].id).innerHTML = vari;
         }
       }
     }
-    
-    
   }
-  flyto("detail_parcours");
+  flyto('detail_parcours');
 }
 
+var flyto = function(id) {
+ //FLyto function hide a id and display an other.
+ document.getElementById(id).style.display = 'inline';
+ document.getElementById(id_visible).style.display = 'none';
+ id_visible = id;
+};
 
- var flyto=function (id){
-  //FLyto function hide a id and display an other.
-    document.getElementById(id).style.display = 'inline';
-    document.getElementById(id_visible).style.display = 'none';
-    id_visible = id;
- }
-
-function delete_option_from_list(id,key){
-
+function delete_option_from_list(id,key) {
   //Deletes an option from a html list
-
-  var list=document.getElementById(id);
+  var list = document.getElementById(id);
   list.remove(key);
-  
 }
 
-function update_item(id,value,list,index){
-  
+function update_item(id,value,list,index) {
   //Update the value and text of an option identified by index in list identified by list
-  var myselect=document.getElementById(list);
+  var myselect = document.getElementById(list);
   console.log(index);
   myselect.options[index].text = value;
   myselect.options[index].value = id;
-  
-  
 }
-function log(){
 
+function log() {}
 
-}
-
-function refresh_list(name,id, objet){
-  
+function refresh_list(name,id, objet) {
   //Not done
-
-  var formObj =document.getElementById(id);
-  for (var loop=0; loop < formObj.mySelect.options.length; loop++) {
+  var formObj = document.getElementById(id);
+  for (var loop = 0; loop < formObj.mySelect.options.length; loop++) {
     formObj.mySelect.options[loop] = null; // remove the option
   }
-  
-  //On recrée
-  var select_tags=document.getElementById(id);
-  
-  
-  
 
+  //On recrée
+  var select_tags = document.getElementById(id);
 }
-function refresh_list_tags(){
-  
+
+function refresh_list_tags() {
   //Refresh list of tags
-  
   reset_list();
-   
+
   //On recrée
-  
   get_all_tags();
-  
-  
-
 }
 
-function lister(){
- 
-  var menu_items=document.getElementsByClassName("item_paremeters_menu");
-
-  for(var i=0; i<menu_items.length; i++){
-    var li=menu_items[i];
-    li.addEventListener("click", changeVisibility, false); 
+function lister() {
+  var menu_items = document.getElementsByClassName('item_paremeters_menu');
+  for (var i = 0; i < menu_items.length; i++) {
+    var li = menu_items[i];
+    li.addEventListener('click', changeVisibility, false);
   }
-  
-}
\ No newline at end of file
+}
+
diff --git a/js/geolocation.js b/js/geolocation.js
index 9a19f41..f7057f2 100644
--- a/js/geolocation.js
+++ b/js/geolocation.js
@@ -1,119 +1,79 @@
-var parcours_id=null;
-var cpt=0;
-var watchId=null;
-var distance=0;
-var start_gps=function(parcours){
+var parcours_id = null;
+var cpt = 0;
+var watchId = null;
+var distance = 0;
+var start_gps = function(parcours) {
+  cpt = 0;
+  parcours_id = parcours;
+  watchId = navigator.geolocation.watchPosition(successCallback, errorCallback, {enableHighAccuracy: true});
+};
 
-	cpt=0;
+function successCallback(position) {
+  if (cpt == 0) {
+    var newobj = {};
+    newobj.LatStartPoint = position.coords.latitude;
+    newobj.LongStartPoint = position.coords.longitude;
+    newobj.startTime = new Date().getTime();
 
-	parcours_id=parcours;
-	watchId = navigator.geolocation.watchPosition(successCallback, errorCallback, {enableHighAccuracy:true});
-	
-	
+    get_parcours_and_begin(parcours_id, newobj);
+    //get_parcours(parcours_id,update_parcours(parcours_id,newobj));
+  } else {
+    if (cpt == 1) {
+      old_lati = position.coords.latitude;
+      old_longi = position.coords.longitude;
+    } else {
+      if (old_lati != null || old_longi != null) {
+        distance = parseFloat(distance) + parseFloat(CalcDistanceBetween(old_lati, old_longi, position.coords.latitude, position.coords.longitude));
+        old_lati = position.coords.latitude;
+        old_longi = position.coords.longitude;
+      }
+    }
+    if (position.coords.accuracy < 30) {
+      var obj = {};
+      obj.latitude = position.coords.latitude;
+      obj.longitude = position.coords.longitude;
+      obj.timestamp = position.timestamp;
+      obj.altitude = position.coords.altitude;
+      obj.accuracy = position.coords.accuracy;
+      obj.altitudeAccuracy = position.coords.altitudeAccuracy;
+      obj.heading = position.coords.heading;
+      obj.speed = position.coords.speed;
+      obj.parcours_id = parcours_id;
+      obj.distance = distance.toFixed(3);
+      update_display(obj);
+      console.log(obj);
+      add_record(obj);
+    } else {
+      console.log('par iciiii');
+      warn_accuracy_not_ok(position.coords.accuracy);
+    }
+  }
+  cpt++;
 }
 
-
-
-function successCallback(position){
-		
-  if(cpt==0){
-	  
-	  var newobj={};
-	  newobj.LatStartPoint=position.coords.latitude;
-	  newobj.LongStartPoint=position.coords.longitude;
-	  newobj.startTime=new Date().getTime();
-	
-	 
-	 get_parcours_and_begin(parcours_id,newobj);
-	 
-	  //get_parcours(parcours_id,update_parcours(parcours_id,newobj));
-	 
-  }else{
-	  if(cpt==1){
-		  old_lati=position.coords.latitude;
-		  old_longi=position.coords.longitude;
-		  
-	  }else{
-		if(old_lati!=null || old_longi!=null){
-	   		
-	   		
-	   		
-				distance=parseFloat(distance)+parseFloat(CalcDistanceBetween(old_lati,old_longi,position.coords.latitude,position.coords.longitude));
-	   		old_lati=position.coords.latitude;
-	   		old_longi=position.coords.longitude;
-	   		
-   		}  
-		  
-	  }
-	   if(position.coords.accuracy<30){
-	  
-	   var obj = {};
-  obj.latitude=position.coords.latitude;
-  obj.longitude=position.coords.longitude;
-  obj.timestamp=position.timestamp;
-  obj.altitude=position.coords.altitude;
-  obj.accuracy=position.coords.accuracy;
-  obj.altitudeAccuracy=position.coords.altitudeAccuracy;
-  obj.heading=position.coords.heading;
-  obj.speed=position.coords.speed;
-  obj.parcours_id=parcours_id;
-  obj.distance=distance.toFixed(3);
-  update_display(obj);
-  console.log(obj);
-  add_record(obj)
-	  
-  }else{
-	  console.log("par iciiii");
-	  	warn_accuracy_not_ok(position.coords.accuracy);
-	  
-  }
-	  
-	  
-	  
-	  
-  }
-  
-  
-  
-  
- 
-  
- 
-  
-  
-  
-  
-  
-  
-  
-cpt++;
-};  
- 
-function errorCallback(error){
-  switch(error.code){
+function errorCallback(error) {
+  switch (error.code) {
     case error.PERMISSION_DENIED:
       console.log("L'utilisateur n'a pas autorisé l'accès à sa position");
-      break;      
+      break;
     case error.POSITION_UNAVAILABLE:
-       console.log("L'emplacement de l'utilisateur n'a pas pu être déterminé");
+      console.log("L'emplacement de l'utilisateur n'a pas pu être déterminé");
       break;
     case error.TIMEOUT:
-       console.log("Le service n'a pas répondu à temps");
+      console.log("Le service n'a pas répondu à temps");
       break;
-    }
-};
- 
-  function stopWatch(compte){
+  }
+}
+
+function stopWatch(compte) {
   clearTimeout(compte);
-    var newobj={};
-	  newobj.StopTime=new Date().getTime();	  
-	  
-	 
-  get_parcours_and_finish(parcours_id,newobj);
-  
+  var newobj = {};
+  newobj.StopTime = new Date().getTime();
+
+  get_parcours_and_finish(parcours_id, newobj);
+
   navigator.geolocation.clearWatch(watchId);
   reset_parcours_list();
-  flyto("parcours_list");
-  } 
-
+  flyto('parcours_list');
+}
 
diff --git a/js/gmaps.js b/js/gmaps.js
index 05e4c90..ad32b41 100644
--- a/js/gmaps.js
+++ b/js/gmaps.js
@@ -1,62 +1,45 @@
 function toRad(Value) {
-		    /** Converts numeric degrees to radians */
-		    return Value * Math.PI / 180;
+  /** Converts numeric degrees to radians */
+  return Value * Math.PI / 180;
 }
-		
-		
+
 function CalcDistanceBetween(lat1, lon1, lat2, lon2) {
-		    var R = 6378.1; // Radius of earth in Km var R = (6371 / 1.609344);
-		    var dLat = toRad(lat2-lat1);
-		    var dLon = toRad(lon2-lon1); 
-		    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
-		            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * 
-		            Math.sin(dLon/2) * Math.sin(dLon/2); 
-		    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
-		    var d = R * c;
-		    return d;
+  var R = 6378.1; // Radius of earth in Km var R = (6371 / 1.609344);
+  var dLat = toRad(lat2 - lat1);
+  var dLon = toRad(lon2 - lon1);
+  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
+          Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
+          Math.sin(dLon / 2) * Math.sin(dLon / 2);
+  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
+  var d = R * c;
+  return d;
+}
+
+function polyline(path_polyline) {
+  var line = new google.maps.Polyline({
+    path: path_polyline,
+    strokeColor: '#ff0000',
+    strokeOpacity: 1.0,
+    strokeWeight: 3
+  });
+  line.setMap(map);
 }
-	     
-	     
-	     
-	   
-	     
-	      function polyline(path_polyline) {
-		    
-		    
-	        var line = new google.maps.Polyline({
-	          path: path_polyline,
-	          strokeColor: '#ff0000',
-	          strokeOpacity: 1.0,
-	          strokeWeight: 3
-	        });
-	        line.setMap(map);
-			
-			
-			
 
-	     }
-	     
-	     
-	     
-	     function initialize() {
-	     console.log("init map");
-    var latlng = new google.maps.LatLng(48.725623,2.272943);
-    var myOptions = {
-        zoom: 12,
-        center: latlng,
-        mapTypeId: google.maps.MapTypeId.ROADMAP
-    };
-   //map = new google.maps.Map(document.getElementById("map"),myOptions);
-      
-      
+function initialize() {
+  console.log('init map');
+  var latlng = new google.maps.LatLng(48.725623, 2.272943);
+  var myOptions = {
+    zoom: 12,
+    center: latlng,
+    mapTypeId: google.maps.MapTypeId.ROADMAP
+  };
+  //map = new google.maps.Map(document.getElementById("map"),myOptions);
 }
- 
-//en haut à gauche 48.758226,2.199986
-//en bas à gauche 48.702857,2.206166
-//en bas à droite 48.702064,2.325643
-//en haut à droite : 48.755397,2.320493
 
+// en haut à gauche 48.758226,2.199986
+// en bas à gauche 48.702857,2.206166
+// en bas à droite 48.702064,2.325643
+// en haut à droite : 48.755397,2.320493
+
+// google.maps.event.addDomListener(window, "load", initialize);
 
- // google.maps.event.addDomListener(window, "load", initialize);
-	     
-	     
\ No newline at end of file
diff --git a/js/gobackhome.js b/js/gobackhome.js
index 27073b7..97e5f1e 100644
--- a/js/gobackhome.js
+++ b/js/gobackhome.js
@@ -1,16 +1,8 @@
-function start_go_backhome(){
+function start_go_backhome() {}
 
+function goto(from_lat, from_lon, to_lat, to_lon) {
+  //Display the distance to the arrival point
 
-	
+  //Display the compass ton this direction
 }
 
-
-
-function goto(from_lat, from_lon, to_lat, to_lon){
-
-	
-	//Display the distance to the arrival point
-	
-	//Display the compass ton this direction 
-
-}
\ No newline at end of file
diff --git a/js/osm.js b/js/osm.js
index 67adb12..9a51f7e 100644
--- a/js/osm.js
+++ b/js/osm.js
@@ -1,106 +1,86 @@
-var map=null;
+// 'use strict';
+
+var map = null;
 var osm_layer;
 var vector;
-function init_osm(){
-  map = new OpenLayers.Map("osm_map");
 
+function init_osm() {
+  map = new OpenLayers.Map('osm_map');
   map.addLayer(new OpenLayers.Layer.OSM());
   map.zoomToMaxExtent();
-
 }
 
-function center_map(lat, lon, level){
-
- 
-
-  var LonLat=new OpenLayers.LonLat( lon , lat )
-          .transform(
-            new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
-            map.getProjectionObject() // to Spherical Mercator Projection
-          );
-  map.setCenter(LonLat,level);
+function center_map(lat, lon, level) {
+  var LonLat = new OpenLayers.LonLat(lon, lat).transform(
+    new OpenLayers.Projection('EPSG:4326'), // transform from WGS 1984
+    map.getProjectionObject() // to Spherical Mercator Projection
+  );
+  map.setCenter(LonLat, level);
 
-   
-  console.log(typeof(lat)+" "+typeof(lon)+" "+typeof(level)+"");
-  console.log("center "+lon+" "+lat+"");
+  console.log(typeof(lat) + ' '+ typeof(lon) + ' '+ typeof(level) + '');
+  console.log('center '+ lon + ' '+ lat + '');
 }
 
-
-
-function draw_trace(tab){
-  if((typeof(vector))!=="undefined"){
+function draw_trace(tab) {
+  if ((typeof(vector)) !== 'undefined') {
     vector.destroy();
   }
- var array_coord=new Array();
- 
-  for (var item in tab){
-    
-    var LonLat=new OpenLayers.LonLat(parseFloat(tab[item].lon), parseFloat(tab[item].lat)); 
-    var point= new OpenLayers.Geometry.Point(LonLat.lon, LonLat.lat);
+  var array_coord = new Array();
+
+  for (var item in tab) {
+    var LonLat = new OpenLayers.LonLat(parseFloat(tab[item].lon), parseFloat(tab[item].lat));
+    var point = new OpenLayers.Geometry.Point(LonLat.lon, LonLat.lat);
     array_coord.push(point);
   }
 
-         
-var style = { 
- strokeColor: '#0000ff', 
-  strokeOpacity: 0.5,
-  strokeWidth: 5
-}; 
-
-vector = new OpenLayers.Layer.Vector("vector");
-
-vector.addFeatures([new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(array_coord).transform(
-      new OpenLayers.Projection("EPSG:4326"),         //from
-      new OpenLayers.Projection("EPSG:900913")                                   //to
-       ),null,style)]);
-map.addLayers([vector]);
-center_map(parseFloat(tab[1].lat),parseFloat(tab[0].lon), 15);
-
-//map.setCenter(new OpenLayers.Geometry.Point(LonLat1.lon, LonLat1.lat), 7);
-
-
-
-
-
-
-
-
-
-
-/*var lineLayer = new OpenLayers.Layer.Vector("Line Layer"); 
-var vectorLine
-map.addControl(new OpenLayers.Control.DrawFeature(lineLayer, OpenLayers.Handler.Path));                                     
-var points = new Array(new OpenLayers.LonLat(2.191429, 48.744191)
-          .transform(
-            new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
-            map.getProjectionObject() // to Spherical Mercator Projection
-          ),new OpenLayers.LonLat(2.355194,48.74487)
-          .transform(
-            new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
-            map.getProjectionObject() // to Spherical Mercator Projection
-          )
-   
-);
-
-var line = new OpenLayers.Geometry.LineString(points);
- center_map(48.74487,2.355194,16);
-var style = { 
- strokeColor: '#0000ff', 
-  strokeOpacity: 0.5,
-  strokeWidth: 5
-};
-
-var lineFeature = new OpenLayers.Feature.Vector(line, null, style);
-lineLayer.addFeatures([lineFeature]);
-map.addLayer(lineLayer);  
-
-
-   
-  var LonLat=new OpenLayers.LonLat(2.191429, 48.744191) .transform(
-            new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
-            map.getProjectionObject() // to Spherical Mercator Projection
-          );
-
-  map.setCenter(LonLat,16); */
+  var style = {
+    strokeColor: '#0000ff',
+    strokeOpacity: 0.5,
+    strokeWidth: 5
+  };
+
+  vector = new OpenLayers.Layer.Vector('vector');
+
+  vector.addFeatures([new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(array_coord).transform(
+    new OpenLayers.Projection('EPSG:4326'),  // from
+    new OpenLayers.Projection('EPSG:900913') // to
+  ), null, style)]);
+  map.addLayers([vector]);
+  center_map(parseFloat(tab[1].lat), parseFloat(tab[0].lon), 15);
+
+  //map.setCenter(new OpenLayers.Geometry.Point(LonLat1.lon, LonLat1.lat), 7);
+
+  /*var lineLayer = new OpenLayers.Layer.Vector("Line Layer");
+  var vectorLine
+  map.addControl(new OpenLayers.Control.DrawFeature(lineLayer, OpenLayers.Handler.Path));
+  var points = new Array(new OpenLayers.LonLat(2.191429, 48.744191)
+            .transform(
+              new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+              map.getProjectionObject() // to Spherical Mercator Projection
+            ),new OpenLayers.LonLat(2.355194,48.74487)
+            .transform(
+              new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+              map.getProjectionObject() // to Spherical Mercator Projection
+            )
+  );
+
+  var line = new OpenLayers.Geometry.LineString(points);
+  center_map(48.74487,2.355194,16);
+  var style = {
+  strokeColor: '#0000ff',
+    strokeOpacity: 0.5,
+    strokeWidth: 5
+  };
+
+  var lineFeature = new OpenLayers.Feature.Vector(line, null, style);
+  lineLayer.addFeatures([lineFeature]);
+  map.addLayer(lineLayer);
+
+    var LonLat=new OpenLayers.LonLat(2.191429, 48.744191) .transform(
+              new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+              map.getProjectionObject() // to Spherical Mercator Projection
+            );
+
+    map.setCenter(LonLat,16); */
+}
 
-}
\ No newline at end of file
diff --git a/js/time.js b/js/time.js
index 60f952a..7906419 100644
--- a/js/time.js
+++ b/js/time.js
@@ -1,41 +1,37 @@
-var centi = 0
+var centi = 0;
 var secon = 0;
 var minu = 0;
 
 function chrono() {
+  centi++;
+  if (centi > 9) {
+    centi = 0;
+    secon++;
+  }
+  if (secon > 59) {
+    secon = 0;
+    minu++;
+  }
 
+  if (secon < 10)
+    document.getElementById('time-sec').innerHTML = '0' + secon;
+  else
+    document.getElementById('time-sec').innerHTML = secon;
 
+  if (minu < 10)
+    document.getElementById('time-min').innerHTML = '0' + minu;
+  else
+    document.getElementById('time-min').innerHTML = minu;
 
-
-	centi++;
-	if (centi > 9) {
-		centi = 0;
-		secon++;
-		
-	}
-	if (secon > 59) {
-		secon = 0;
-		minu++;
-	}
-	
-	if(secon < 10)
-		document.getElementById('time-sec').innerHTML = "0" + secon;
-	else
-		document.getElementById('time-sec').innerHTML = secon;
-		
-	if(minu < 10)
-		document.getElementById('time-min').innerHTML = "0" + minu;
-	else
-		document.getElementById('time-min').innerHTML = minu;
-		
-	compte = setTimeout('chrono()', 100);
+  compte = setTimeout('chrono()', 100);
 }
 
 function rasee() {
-	clearTimeout(compte);
-	centi = 0;
-	secon = 0;
-	minu = 0;
-	document.getElementById('time-min').innerHTML = minu;
-	document.getElementById('time-sec').innerHTML = secon;
-}
\ No newline at end of file
+  clearTimeout(compte);
+  centi = 0;
+  secon = 0;
+  minu = 0;
+  document.getElementById('time-min').innerHTML = minu;
+  document.getElementById('time-sec').innerHTML = secon;
+}
+
